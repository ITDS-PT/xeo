<public:component>
<public:attach event="onmousedown"	onevent="down()"/>
<public:attach event="onkeyup"		onevent="AccessKey()"/>
<public:attach event="onkeydown"	onevent="AccessKey2()"/>
<public:attach event="onmouseover"	onevent="over()"/>
<public:attach event="onmouseout"	onevent="out()"/>
<public:method name="clean"/>
<public:method name="hideItem"/>
<public:method name="showItem"/>

<script language="JavaScript">

var _o, _oOn, _oTopOn, _oSubOn;
var _capture = false;


var KEY_LEFT = 37;
var KEY_RIGHT = 39;
var KEY_UP = 38;
var KEY_DOWN = 40;
var KEY_ENTER = 13;
var KEY_SHIFT = 16;
var KEY_TAB = 9;
var KEY_ESC = 27;
var COLOR_SUBMENU_SELECT="#D6E0EC";
var COLOR_MENU_SELECT="#ABBEC7";
var BORDER_COLOR_SELECT="#454F5F";

var BACK_COLOR_SELECT="#FCA210";

function AccessKey2()
{
	switch (event.keyCode)
	{
		case KEY_TAB:
		
			if (_oTopOn)
			{
				with (_oTopOn.runtimeStyle)
				{
					borderColor = "";
					backgroundColor = "";
				}

				_oTopOn = null;
			}
			
			clean();
		
			break;
		
		case KEY_ESC:

			clean();
			break;
			
		case KEY_DOWN:
		
			if (_o)
			{
				var i = 0;
				
				if (_oOn)
				{
					i = _oOn.rowIndex + 1;
					
					if (i >= _o.rows.length)
					{
						return false;
					}
				
					if (_o.rows[i].className == "mnuSpacer")
					{
						i++;
					}
				}
				
				if (_oSubOn)
				{
					i = _oSubOn.rowIndex + 1;
					
					if (i >= _o.oSub.rows.length)
					{
						return false;
					}
				
					if (_o.oSub.rows[i].className == "mnuSpacer")
					{
						i++;
					}
					
					Focus(_o.oSub.rows[i]);
				}
				else
				{
					Focus(_o.rows[i]);
				}
			}
			
			break;
			
		
		case KEY_UP:
		
			if (_o)
			{
				var i = 0;

				if (_oOn && !_oSubOn)
				{
					i = _oOn.rowIndex - 1;

					if (i < 0)
					{
						return false;
					}

					if (_o.rows[i].className == "mnuSpacer")
					{
						i--;
					}
				}

				if (_oSubOn)
				{
					i = _oSubOn.rowIndex - 1;
					
					if (i < 0)
					{
						return false;
					}
				
					if (_o.oSub.rows[i].className == "mnuSpacer")
					{
						i--;
					}
					
					Focus(_o.oSub.rows[i]);
				}
				else
				{
					Focus(_o.rows[i]);
				}
			}
			
			break;
		
		case KEY_RIGHT:
		
			if (_oOn && _oOn.menu && !_oSubOn)
			{
				down(_oOn.firstChild);
				Focus(_o.oSub.rows[0])
			}
				
			break;

		case KEY_LEFT:
		
			if (_oSubOn)
			{
				Focus(_oOn);
				killSub();
			}
			break;
			
		case KEY_ENTER:
			
			if (_oOn)
			{
				var o = _oOn;
				var oSub = _oSubOn;
							
				clean();
				out();

				if (o.menu)
				{
					if (oSub)
					{
						down(oSub);
					}
					else
					{
						down(o.firstChild);
					}
				}
				else
				{
					down(o);
				}
			}
			break;
	}
}


function Focus(o)
{
	if (_oOn && !_o.oSub)
	{
		_oOn.runtimeStyle.backgroundColor = "";
	}
	else if (_oSubOn)
	{
		_oSubOn.runtimeStyle.backgroundColor = "";
	}
	
	o.runtimeStyle.backgroundColor = COLOR_SUBMENU_SELECT;
	isParentSub(o) ? _oSubOn = o : _oOn = o;
}


function AccessKey()
{
	var iKey = event.keyCode;
	
	switch (iKey)
	{
		case KEY_TAB: over();
		case KEY_SHIFT: return false; break;
		default:

			if (event.altKey || iKey == KEY_ENTER)
			{
				if (event.srcElement.className == "menu" && event.srcElement.menu)
				{
					clean();
					over();
					down();
				}
				else
				{
					event.srcElement.click();
				}
			}
	}
}

// END ALPHA RELEASE CODE
// ========================================================================================================
// ========================================================================================================
// ========================================================================================================






function clean()
{
	if (_o)
	{
		_o.style.display = "none" 
		_o.nextSibling.style.display = "none";
		_o.parentElement.nextSibling.style.display = "none";
		_o.parentElement.parentElement.parentElement.parentElement.parentElement.style.zIndex = 0;
		killSub();

		_o.releaseCapture();
		_capture = false;
	}

	out();
}

// hideItem - remove passed in menu item.
function hideItem(o)
{
	var bHide = true;
	var oTmp = o.parentElement.parentElement;
	
	o.style.display = "none";
	oTmp.loaded = false;

	for (var i = 0; i < oTmp.rows.length; i++)
	{
		if (oTmp.rows[i].style.display != "none")
		{
			bHide = false;
		}
	}

	if (bHide)
	{
		oTmp.parentElement.style.display = "none";
	}
}

// hideItem - add passed in menu item.
function showItem(o)
{
	var bShow = false;
	var oTmp = o.parentElement.parentElement;

	o.style.display = "inline";
	oTmp.loaded = false;

	for (var i = 0; i < oTmp.rows.length; i++)
	{
		if (oTmp.rows[i].style.display != "none")
		{
			bShow = true;
		}
	}

	if (bShow)
	{
		oTmp.parentElement.style.display = "inline";
	}
}

function killSub(bForce)
{
	if (_o && _o.oSub)
	{
		_o.oSub.style.display = "none" 
		_o.oSub.nextSibling.style.display = "none";
		_o.oSub = null;

		if (_oSubOn)
		{
			_oSubOn.runtimeStyle.backgroundColor = "";
			_oSubOn = null;
		}
	}

	if(_oOn && !_oOn.menu || bForce)
	{
		_oOn.runtimeStyle.backgroundColor = "";
		_oOn = null;
	}
}


function out()
{
	if (_oOn)
	{
		if (isParentSub(event.toElement))
		{
			if (_oSubOn)
			{
				_oSubOn.runtimeStyle.backgroundColor = "";
				_oSubOn = null;
			}
			return;
		}

		var oTmp = event.srcElement;

		if (isParentMenu(oTmp) && oTmp != _o) killSub(true);
	}

	if (_oTopOn && !_capture)
	{
		with (_oTopOn.runtimeStyle)
		{
			borderColor = "";
			backgroundColor = "";
			border="";
		}
		_oTopOn = null;
	}
}

function FocusObj(o)
{
	if (document.hasFocus())
	{
		try
		{
			o.focus();
		}
		catch (e)
		{}
	}
}

function over(o)
{
	if (document.readyState != "complete")
	{
		
		return false;
	}

	if (!o)
	{
		o = getElem();
	}
	
	switch (o.className)
	{
		case "mnuSpacer": case "mnubar": case "mnuList": case "icMenu mnuRight": case "icMenu":	return;
		case "menu": case "button":

			out();

			if (!_capture)
			{
				with (o.runtimeStyle)
				{
					borderColor = BORDER_COLOR_SELECT;
					backgroundColor = BACK_COLOR_SELECT;
				}
			}
			else if (o != _o.parentElement)
			{
				with (o.runtimeStyle)
				{
					borderColor = BORDER_COLOR_SELECT;
					backgroundColor = BACK_COLOR_SELECT;
				}

				clean();
				down();
			}

			_oTopOn = o;

			break;
         case "menuFlat": 

			out();

			if (!_capture)
			{
				with (o.runtimeStyle)
				{
					borderColor = BORDER_COLOR_SELECT;
					backgroundColor = BACK_COLOR_SELECT;
					borderSize=1;
				//	border="1px solid #000000";
				}
			}
			else if (o != _o.parentElement)
			{
				with (o.runtimeStyle)
				{
					borderColor = BORDER_COLOR_SELECT;
					backgroundColor = BACK_COLOR_SELECT;
				//	border="1px solid #000000";
				}

				clean();
				down();
			}

			_oTopOn = o;

			break;

		default: 

			try
			{
				if (event.srcElement.tagName == "IMG") o = o.parentElement;

				if (o.parentElement.parentElement.className != "mnuList") return false; 
				o.runtimeStyle.backgroundColor = COLOR_SUBMENU_SELECT;

				if (o.menu) down();
				isParentSub(event.srcElement) ? _oSubOn = o : _oOn = o;
			}
			catch (e)
			{}
	}
}


function down(o)
{
	if (document.readyState != "complete")
	{
		return false;
	}

	var iOffSet = 0;
	if (this.parentElement.cells[0].width == "9") iOffSet = 11;

	var bSub = false;
	
	if (!o)
	{
		o = event.srcElement;
	}

	FocusObj(o);
	
	switch (o.tagName)
	{
		case "IMG":
		case "U": o = o.parentElement;
	}

	if (!o.menu)
	{
		if (o.tagName != "TR")
		{
			while (o.tagName != "TR")
			{
				o = o.parentElement;
				if (o.menu || o.tagName == "HTML") break;
			}
			bSub = true;
			iOffSet = 199;
		}

		if (!o.menu)
		{
			if (o.className != "mnuSpacer")
			{
				if (_o) _o.releaseCapture();
				o.click();
			}

			return;
		}
	}

	var oElm;
	
	if (bSub)
	{
		killSub();
		oElm = o.parentElement.parentElement.parentElement.children[o.menu];
	}
	else
	{
		o.runtimeStyle.backgroundColor = COLOR_MENU_SELECT;
		oElm = o.children[o.menu];
	}

	if ((_capture && !bSub) || !oElm)
	{
		clean();
		return;
	}

	if (!_capture)
	{
		_capture = true;
		oElm.setCapture();
	}
	else if (!bSub)
	{
		oElm.releaseCapture();
		_capture = false;
	}

	o.parentElement.parentElement.parentElement.parentElement.style.zIndex = 10;

	// Setup oElm Once
	if (!oElm.loaded)
	{
		var i = 2;

		with (oElm.style)
		{
			if (bSub)
			{
				left = _o.offsetLeft + iOffSet;
			}
			else
			{
				i = 1;
				left = o.offsetLeft + iOffSet;
			}

			top = (o.offsetTop + o.offsetHeight) - i
		}
	}
	else
	{
		oElm.parentElement.nextSibling.style.display = "inline";
		oElm.nextSibling.style.display = "inline";
	}

	oElm.style.display = "inline";

	if (!oElm.loaded)
	{
		if (bSub)
		{
			buildShadow(oElm, _o.offsetLeft + iOffSet);
			oElm.isSub = true;
		}
		else
		{
			buildShadow(oElm, o.offsetLeft + iOffSet);
			buildShadow(o, o.offsetLeft + iOffSet);
		}
		
		oElm.onlosecapture = function y() { this.parentElement.parentElement.clean() };		
		oElm.loaded = true;
	}

	bSub ? _o.oSub = oElm :	_o = oElm;
}

function buildShadow(o, iLeft)
{
	var i = 2;
	var oTmp = document.createElement("span");

	while (i>0)
	{
		var oRec = document.createElement('div');

		with (oRec.style)
		{
			position = "absolute";
			left	= iLeft + i;
			top		= o.style.posTop + i;
			width	= o.offsetWidth;
			height	= o.offsetHeight;
			zIndex	= o.style.zIndex - i;
			filter	= "alpha(opacity=" + (60/i) + ")";
			backgroundColor = "#777777";
		}

		oTmp.insertAdjacentElement("afterBegin", oRec);

		i--;
	}

	o.insertAdjacentElement("afterEnd", oTmp);
}


function getElem()
{
	var o = event.srcElement;

	switch (o.tagName)
	{
		case "HR":
		case "SPAN":
			if (o.className == "mnuSubItem") return o.parentElement.parentElement;
			break;
		case "IMG":
		case "U":
		case "TD":
			o = o.parentElement;
			break;
	}

	return o;
}


function isParentSub(oTest)
{
	if (!oTest) return;

	var i = 0;

	while (!oTest.isSub)
	{
		if (i++ > 4 || oTest.tagName == "HTML") return;
		oTest = oTest.parentElement;
	}

	return true;
}


function isParentMenu(oTest)
{
	if (!oTest) return;

	var i = 0;

	while (oTest != _o)
	{
		if (i++ > 4 || oTest.tagName == "HTML") return;
		oTest = oTest.parentElement;
	}

	return true;
}

</script>
</public:component>