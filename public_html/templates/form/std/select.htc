<public:component lightweight="true">
<public:attach event="oncontentready"	onevent="init()"/>
<public:attach event="onmouseup"		onevent="mouseUp()"/>
<public:attach event="onkeydown"		onevent="handleKey()"/>
<public:attach event="onblur"           onevent="onBlur()"/>
<public:method name="on"/>
<public:method name="disable"/>
<public:method name="enable"/>
<public:method name="setOpen"/>
<public:method name="handleClick"/>
<public:method name="reset"/>
<public:method name="setValue"/>
<public:method name="setValueByRefresh"/>
<public:method name="getValueIndex"/>
<public:method name="getValue"/>
<public:property name="req" value="0"/>
<public:property id="allowValueEditProperty" name="allowValueEdit" get="getAllowValueEdit" put="setAllowValueEdit"/>
<public:property id="returnValueProperty" name="returnValue" get="getReturnValue"/>
<public:property name="isInitialized" get="getInitialized"/>
<public:event id="eventOnReturnValueChange" name="onreturnvaluechange"/>
<!-- Set event.returnValue to true if the data is valid, false otherwise.  Set event.formattedValue to the appropriate formatted value (to pretty up user input, for example)  -->
<public:event id="eventOnValidate" name="onvalidate"/>
<!-- Set event.sEntry the entry immediately preceding event.inputValue in the list.  Ex: if inputValue == "12:42", sEntry would equal "12:00" -->
<public:event id="eventOnFindNextSmallestEntry" name="onfindnextsmallestentry"/>
<public:event id="eventOnInitComplete" name="oninitcomplete"/>
<script language="JavaScript">
var _iY = 121;
var _oTbl, _oIn, _oPop;
var _bOpen = false;
var _bAllowValueEdit = false;
var _bInOnBlur = false;
var _bIsInitialized = false;
var VALUE_DOESNT_EXIST = -1;
var VALUE_IS_CUSTOM = -2;
var KEY_UP = 38;
var KEY_DOWN = 40;
var KEY_ENTER = 13;
var KEY_DLE = 16;
var KEY_TAB = 9;
function init()
{
	if (window.document.media == "print")
	{
		return false;
	}
	
	
	var s = "<table onmouseout='parentElement.setOpen();' onmouseover='parentElement.setOpen();' style='table-layout:fixed;width:100%;' cellspacing=0 cellpadding=0><col><col width=18><tr><td><input crmType='sel'";
	if (this.changeHandler)	s += " onchange=\"if(returnValue!=lastValue){" + changeHandler + "(this);}\"";
	if (this.tabbingIndex)	s += " tabindex=\"" + tabbingIndex + "\"";
	if (!_bAllowValueEdit)
	{
		s += " contenteditable='false'";
	}
	s += " onselectstart='if (!parentElement.parentElement.parentElement.parentElement.parentElement.allowValueEdit){return false;}else{return true;}' class='selectBox' onfocus=\"if (!parentElement.parentElement.parentElement.parentElement.parentElement.allowValueEdit){runtimeStyle.backgroundColor='#A8BEC6'};\" onblur=\"runtimeStyle.backgroundColor='';\" lastValue=\"" + value + "\" returnValue=\"" + value + "\" name=\"" + name + "\"></td><td><img onmouseover=\"if (!disabled) src='templates/form/std/selectOn.gif';\" onmouseout=\"if (!disabled) src='templates/form/std/selectOff.gif';\" style='cursor:hand;' align='absmiddle' src='templates/form/std/selectOff.gif'></td></tr></table>" + innerHTML;
	innerHTML = s;
	var i = 0;
	var iRowCount = children[1].rows.length;
	while (i < iRowCount)
	{
		if (children[1].rows[i].cells[0].val == value) break;
		i++;
	}
	
	
	if (i >= iRowCount)
	{
		
		i = (value.length == 0) ? 0 : VALUE_IS_CUSTOM;
	}
	
	_oIn = firstChild.rows[0].cells[0].firstChild;
	_oIn.original = _oIn.returnValue;
	
	_oIn.automatic= true;
	
	if (isListItemRow(i))
	{
		_oIn.value = children[1].rows[i].cells[0].innerText;
		_oIn.returnValue = children[1].rows[i].cells[0].val;
	}
	else
	{
		
		_oIn.value = value;
		_oIn.returnValue = value;
	}
//	_oIn.defaultValue	= _oIn.returnValue;
	_oIn.rowNum			= getValueIndex(_oIn.returnValue);
	_oIn.htc			= this;
	_oIn.req			= req;
	_oIn.attachEvent("onblur", onBlur);
	
	setAllowValueEdit(_bAllowValueEdit);
	if (this.element.disabled)
	{
		disable();
	}
	_bIsInitialized = true;
	setAllowValueEdit(_bAllowValueEdit);
	if (this.setdisabled)
	{
		internalDisable(true);
	}
	eventOnInitComplete.fire();
}
function getSurroundingEntries(sValue)
{
	
	var oRVal = new Object();
	
	if (isListItemRow(_oIn.rowNum))
	{
		oRVal.iPrevious = _oIn.rowNum - 1;
		oRVal.iNext     = _oIn.rowNum + 1;
	}
	else
	{
		
		var oEvent = createEventObject();
		oEvent.inputValue = sValue;
		eventOnFindNextSmallestEntry.fire(oEvent);
		if (typeof(oEvent.sEntry) != "undefined")
		{
			var iIndex = getValueIndex(oEvent.sEntry);
			oRVal.iPrevious = iIndex;
			oRVal.iNext     = iIndex + 1;
		}
		else
		{
			
			oRVal.iPrevious = 0;
			oRVal.iNext     = 1;
		}
	}
	
	if (oRVal.iPrevious < 0)
	{
		oRVal.iPrevious = 0;
		oRVal.iNext = (_oTbl.rows.length > 1) ? 1 : 0;
	}
	else if (oRVal.iNext >= _oTbl.rows.length)
	{
		oRVal.iNext = _oTbl.rows.length - 1;
		oRVal.iPrevious = (_oTbl.rows.length > 1) ? oRVal.iNext - 1 : oRVal.iNext;
	}
	return oRVal;
}
function getInitialized()
{
	return _bIsInitialized;
}
function onBlur()
{
	
	
	if (_bInOnBlur) return;
	
	_bInOnBlur = true;
	
	if (_bAllowValueEdit)
	{
		var oResult = isValidInput(_oIn.value);
		if (oResult.isValid)
		{
			
			_oIn.value       = oResult.sFormattedInput;
			_oIn.returnValue = oResult.sFormattedInput;
			
			fireReturnValChange( );
			
			_oIn.rowNum = getValueIndex(_oIn.returnValue);
		}
		else
		{
			
			_oIn.value = _oIn.returnValue;
		}
	}
	_bInOnBlur = false;
	_oIn.automatic	 = false;
}
function isValidInput(sInput)
{
	
	var oEvent = createEventObject();
	oEvent.inputValue = _oIn.value;
	eventOnValidate.fire(oEvent);
	oResult = new Object();
	if (typeof(oEvent.returnValue) == "undefined")
	{
		
		oResult.isValid = true;
		oResult.sFormattedInput = sInput;
	}
	else if (oEvent.returnValue == true)
	{
		
		oResult.sFormattedInput = oEvent.formattedValue;
		oResult.isValid = true;
	}
	else
	{
		oResult.isValid = false;
	}
	return oResult;
}
function getReturnValue()
{
	return _oIn.returnValue;
}
function getAllowValueEdit()
{
	return _bAllowValueEdit;
}
function setAllowValueEdit(bAllow)
{
	_bAllowValueEdit = bAllow;
	
	
	
	if (readyState == "complete" && _bIsInitialized)
	{
		_oIn.contentEditable = bAllow;
		allowValueEditProperty.fireChange();
	}
}
function getValue(i)
{
	var oRows = this.children[1].rows;
	if (i < 0 || i >= oRows.length)
	{
		return false;
	}
	return oRows[i].cells[0].val;
}
function getValueIndex(sVal)
{
	if (sVal == "")
	{
		return VALUE_DOESNT_EXIST;
	}
	var oRows = this.children[1].rows;
	for (var i = 0; i < oRows.length; i++)
	{
		if (oRows[i].cells[0].val == sVal)
		{
			return i;
		}
	}
	return VALUE_IS_CUSTOM;
}
function setValue(sVal)
{
	var iRow = getValueIndex(sVal);
	if (isListItemRow(iRow))
	{
		setVals(iRow);
	}
	else
	{
		
		_oIn.value = sVal;
		_oIn.returnValue = sVal;
		_oIn.rowNum = iRow;
		fireReturnValChange( );
	}
}
function fireReturnValChange( )
{
	returnValueProperty.fireChange( );
	
	var oEvent = createEventObject();
	eventOnReturnValueChange.fire( oEvent );
}
function initBox()
{
	if (children[1].bCached) return;
	children[1].bCached = true;
	_oPop = openPopup();
	var oCol = element.document.createElement("COL");
	with (oCol.style) 
	{
		paddingLeft	= "5px";
		cursor		= "default";
		fontSize	= "11px";
		fontFamily	= "verdana";
	}
	with (children[1]) 
	{
		firstChild.insertBefore(oCol);
		onmouseover		= "this.box.on(event);";
		onselectstart	= "return false;";
		onclick			= "this.box.handleClick(event);";
		style.width		= "100%";
	}
	
	if (children[1].rows.length <= 6) _iY = (children[1].rows.length * 17) + 2;
	_oPop.document.body.innerHTML = "<span style='width:100%; height:" + _iY + "px; border:1px solid #000000; overflow-y:auto; overflow-x:hidden;'>" + children[1].outerHTML + "</span>";
	
	_oTbl = _oPop.document.body.firstChild.firstChild;
	_oTbl.style.display = "inline";
	_oTbl.box = this;
}
function mouseUp()
{
	
	if (_oIn.disabled || (_bAllowValueEdit && event.srcElement.tagName == "INPUT"))
	{
		return;
	}
	_oIn.focus();
	if (!_bOpen)
	{
		showBox();
		focus();
	}
	_bOpen = !_bOpen;
}
function hideBox()
{
	_bOpen = false;
	try
	{
		_oPop.hide();
		_oIn.focus();
		_oIn.fireEvent("onchange");
		if (isListItemRow(_oIn.rowNum))
		{
			setColor(_oIn,_oTbl.rows[_oIn.rowNum]);
		}
	}
	catch (e)
	{
		return false;
	}
}
function reset()
{
	children[1].bCached = false;
	_oIn.rowNum = 0;
}
function internalDisable(b)
{
	var oTR = element.children[0].children[1].children[0];
	var oSelectBox = oTR.children[0].children[0];
	var oImg = oTR.children[1].children[0];
	if (b)
	{
		s = "default";
		
		oSelectBox.runtimeStyle.borderColor = "#cccccc";
		oSelectBox.className = "selectBox ro";
		oImg.className = "ro";
		oImg.src = "templates/form/std/selectGrey.gif";
	}
	else
	{
		s = "hand";
		
		oSelectBox.runtimeStyle.borderColor = "";
		oSelectBox.className = "selectBox";
		oImg.className = "selectBox";
		oImg.src = "templates/form/std/selectOff.gif";
	}
	
	oSelectBox.disabled = b;
	with (element.children[0].rows[0])
	{
		cells[1].firstChild.style.cursor = s;
		cells[1].firstChild.disabled = b;
		disabled = b;
	}
	element.disabled = b;
}
function enable()
{
	internalDisable(false);
}
function disable()
{
	internalDisable(true);
}
function setOpen()
{
	_bOpen = (_oPop && _oPop.isOpen);
}
function showBox()
{
	
	_oIn.rowNum = getValueIndex(_oIn.returnValue);
	initBox();
	setDefault();
	_oPop.show(0, 19, clientWidth, _iY, firstChild);
	
	
	var iTopIndex;
	if (isListItemRow(_oIn.rowNum))
	{
		iTopIndex = _oIn.rowNum;
	}
	else
	{
		oResult = getSurroundingEntries(_oIn.returnValue);
		iTopIndex = oResult.iPrevious;
	}
	
	var span = _oPop.document.body.firstChild;
	
	
	span.scrollTop = span.firstChild.firstChild.children[iTopIndex].offsetTop;
}
function on(o)
{
	o = o.srcElement.parentElement;
	if (o.tagName == "TR")
	{
		setColor(o,_oTbl.rows[_oIn.rowNum]);
		_oIn.rowNum = o.rowIndex;
	}
}
function handleClick(o)
{
	if (o.srcElement.parentElement.rowIndex >= 0)
	{
		_oIn.rowNum = o.srcElement.parentElement.rowIndex;
		setVals(_oIn.rowNum);
		hideBox();
	}
}
function handleKey()
{
	var i = event.keyCode;
	if (i == KEY_TAB && _bOpen)
	{
		
		
		_oIn.focus();
		return;
	}
	switch (i)
	{
		case KEY_UP: case KEY_DOWN: case KEY_ENTER:
			initBox();
			if (!_bOpen) setDefault();
			if (i != KEY_ENTER && event.altKey)
			{
				_oPop.isOpen ? hideBox() : showBox();
				return;
			}
			break;
		default: return;
	}
	
	if (_bAllowValueEdit)
	{
		
		
		
		if (_oIn.value != _oIn.returnValue)
		{
			
			var oResult = isValidInput(_oIn.value);
			if (oResult.isValid)
			{
				
				
				
				_oIn.rowNum = getValueIndex(oResult.sFormattedInput); 
				
				
				
				_oIn.returnValue = oResult.sFormattedInput;
			}
		}
	}
	switch (i)
	{
		case KEY_UP:
			
			oResult = getSurroundingEntries(_oIn.returnValue);
			if (oResult.iPrevious == _oIn.rowNum)
			{
				break; 
			}
			var oPreviousEntry;
			if (isListItemRow(_oIn.rowNum))
			{
				oPreviousEntry = _oTbl.rows[_oIn.rowNum];
			}
			else
			{
				
				oPreviousEntry = null;
			}
			var oNewEntry = _oTbl.rows[oResult.iPrevious];
			setColor(oNewEntry, oPreviousEntry, true);
			setVals(oResult.iPrevious);
			
			_oIn.fireEvent("onchange");
			break;
		case KEY_DOWN:
			
			oResult = getSurroundingEntries(_oIn.returnValue);
			if (oResult.iNext == _oIn.rowNum)
			{
				
				break;
			}
			var oPreviousEntry;
			if (isListItemRow(_oIn.rowNum))
			{
				oPreviousEntry = _oTbl.rows[_oIn.rowNum];
			}
			else
			{
				
				oPreviousEntry = null;
			}
			var oNewEntry = _oTbl.rows[oResult.iNext];
			setColor(oNewEntry, oPreviousEntry, true);
			setVals(oResult.iNext);
			
			
			_oIn.fireEvent("onchange");
			break;
		case KEY_ENTER:
			hideBox();
			break;
	}
	
	event.cancelBubble = true;
	event.returnValue = false;
}
function setVals(_iIndex)
{
	with (element.children[1].rows[_iIndex].cells[0])
	{
		_oIn.lastValue = _oIn.returnValue;
		_oIn.value = innerText;
		_oIn.returnValue = val;
		_oIn.rowNum = _iIndex;
	}
	
	fireReturnValChange( );
}

function setValsByRefresh(_iIndex)
{
	with (element.children[1].rows[_iIndex].cells[0])
	{
		_oIn.lastValue = _oIn.returnValue;
		_oIn.value = innerText;
		_oIn.returnValue = val;
		_oIn.original = val;
		_oIn.rowNum = _iIndex;
	}
}

function setColor(oOn, oOff, bScroll)
{
	if (bScroll) oOn.scrollIntoView();
	if (oOn != oOff)
	{
		if (oOn != null)
		{
			oOn.runtimeStyle.backgroundColor = "#A8BEC6";
		}
		if (oOff != null)
		{
			oOff.runtimeStyle.backgroundColor = "";
		}
	}
}
function setDefault()
{
	
	var oRows = _oTbl.rows;
	for (var i = 0; i < oRows.length; i++)
	{
		setColor(null, oRows[i]);
	}
	if (isListItemRow(_oIn.rowNum))
	{
		setColor(_oTbl.rows[_oIn.rowNum], null);
	}
}
function isListItemRow(iRowId)
{
	return(iRowId != VALUE_DOESNT_EXIST && iRowId != VALUE_IS_CUSTOM);
}

function setValueByRefresh(sVal)
{
	var iRow = getValueIndex(sVal);
	if (isListItemRow(iRow))
	{
		setValsByRefresh(iRow);
	}
	else
	{		
		_oIn.value = sVal;
		_oIn.returnValue = sVal;
		_oIn.original = _oIn.returnValue;
		_oIn.rowNum = iRow;
	}
}
</script>
</public:component>
