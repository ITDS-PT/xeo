package netgest.bo.data.postgre.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import netgest.bo.data.postgre.PostGreUtils;

public class PostGresStatement implements Statement {

	
	private Statement stm;

	public PostGresStatement(Statement stm)
	{
		this.stm = stm;
	}
	
	public ResultSet executeQuery(String sql) throws SQLException {
		return stm.executeQuery(PostGreUtils.prepareSQLForPostGres(sql));
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return stm.unwrap(iface);
	}

	public int executeUpdate(String sql) throws SQLException {
		return stm.executeUpdate(PostGreUtils.prepareSQLForPostGres(sql));
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return stm.isWrapperFor(iface);
	}

	public void close() throws SQLException {
		stm.close();
	}

	public int getMaxFieldSize() throws SQLException {
		return stm.getMaxFieldSize();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		stm.setMaxFieldSize(max);
	}

	public int getMaxRows() throws SQLException {
		return stm.getMaxRows();
	}

	public void setMaxRows(int max) throws SQLException {
		stm.setMaxRows(max);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		stm.setEscapeProcessing(enable);
	}

	public int getQueryTimeout() throws SQLException {
		return stm.getQueryTimeout();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		stm.setQueryTimeout(seconds);
	}

	public void cancel() throws SQLException {
		stm.cancel();
	}

	public SQLWarning getWarnings() throws SQLException {
		return stm.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		stm.clearWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		stm.setCursorName(name);
	}

	public boolean execute(String sql) throws SQLException {
		return stm.execute(PostGreUtils.prepareSQLForPostGres(sql));
	}

	public ResultSet getResultSet() throws SQLException {
		return stm.getResultSet();
	}

	public int getUpdateCount() throws SQLException {
		return stm.getUpdateCount();
	}

	public boolean getMoreResults() throws SQLException {
		return stm.getMoreResults();
	}

	public void setFetchDirection(int direction) throws SQLException {
		stm.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return stm.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		stm.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return stm.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return stm.getResultSetConcurrency();
	}

	public int getResultSetType() throws SQLException {
		return stm.getResultSetType();
	}

	public void addBatch(String sql) throws SQLException {
		stm.addBatch(PostGreUtils.prepareSQLForPostGres(sql));
	}

	public void clearBatch() throws SQLException {
		stm.clearBatch();
	}

	public int[] executeBatch() throws SQLException {
		return stm.executeBatch();
	}

	public Connection getConnection() throws SQLException {
		return stm.getConnection();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return stm.getMoreResults(current);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return stm.getGeneratedKeys();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return stm.executeUpdate(PostGreUtils.prepareSQLForPostGres(sql), autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return stm.executeUpdate(PostGreUtils.prepareSQLForPostGres(sql), columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return stm.executeUpdate(PostGreUtils.prepareSQLForPostGres(sql), columnNames);
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return stm.execute(PostGreUtils.prepareSQLForPostGres(sql), autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return stm.execute(PostGreUtils.prepareSQLForPostGres(sql), columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return stm.execute(PostGreUtils.prepareSQLForPostGres(sql), columnNames);
	}

	public int getResultSetHoldability() throws SQLException {
		return stm.getResultSetHoldability();
	}

	public boolean isClosed() throws SQLException {
		return stm.isClosed();
	}

	public void setPoolable(boolean poolable) throws SQLException {
		stm.setPoolable(poolable);
	}

	public boolean isPoolable() throws SQLException {
		return stm.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		stm.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return stm.isCloseOnCompletion();
	}
}
