/*Enconding=UTF-8*/
/* Generated by Together */

package netgest.bo.parser.symbol;

public class BinaryExpression implements ExpressionSymbol {
    public ExpressionSymbol getLeftExpression(){ return leftExpression; }

    public void setLeftExpression(ExpressionSymbol leftExpression){ this.leftExpression = leftExpression; }

    public ExpressionSymbol getRightExpression(){ return rightExpression; }

    public void setRightExpression(ExpressionSymbol rightExpression){ this.rightExpression = rightExpression; }

    public int getOperator(){
            return operator;
        }

    public void setOperator(int operator){
            this.operator = operator;
        }

    public String toJAVA(){
        StringBuffer sb = new StringBuffer();

        if(!(operator == JavaTokenTypes.ASSIGN || operator == JavaTokenTypes.DOT))
            sb.append("(");
        if(operator == JavaTokenTypes.DOT)
            sb.append(leftExpression.toJAVA());
        else
            sb.append(leftExpression.toJAVA()).append(" ");
        if(operator == JavaTokenTypes.DIV)
            sb.append("/");
        else if(operator == JavaTokenTypes.MINUS)
            sb.append("-");
        else if(operator == JavaTokenTypes.PLUS)
            sb.append("+");
        else if(operator == JavaTokenTypes.STAR)
            sb.append("*");
        else if(operator == JavaTokenTypes.LAND)
            sb.append("&&");
        else if(operator == JavaTokenTypes.LOR)
            sb.append("||");
        else if(operator == JavaTokenTypes.GT)
            sb.append(">");
        else if(operator == JavaTokenTypes.GE)
            sb.append(">=");
        else if(operator == JavaTokenTypes.NOT_EQUAL)
            sb.append("!=");
        else if(operator == JavaTokenTypes.EQUAL)
            sb.append("==");
        else if(operator == JavaTokenTypes.ASSIGN)
            sb.append("=");
        else if(operator == JavaTokenTypes.LT)
            sb.append("<");
        else if(operator == JavaTokenTypes.LE)
            sb.append("<=");
        else if(operator == JavaTokenTypes.MOD)
            sb.append("%");
        else if(operator == JavaTokenTypes.DOT)
            sb.append(".");
        else if(operator == JavaTokenTypes.BSR_ASSIGN)
            sb.append(">>>=");
        else if(operator == JavaTokenTypes.BSR)
            sb.append(">>>");
        else if(operator == JavaTokenTypes.BAND_ASSIGN)
            sb.append("&=");
        else if(operator == JavaTokenTypes.BAND)
            sb.append("&");
        else if(operator == JavaTokenTypes.PLUS_ASSIGN)
            sb.append("+=");
        else if(operator == JavaTokenTypes.MINUS_ASSIGN)
            sb.append("-=");
        else if(operator == JavaTokenTypes.STAR_ASSIGN)
            sb.append("*=");
        else if(operator == JavaTokenTypes.BOR_ASSIGN)
            sb.append("|=");
        else if(operator == JavaTokenTypes.BOR)
            sb.append("|");
        else if(operator == JavaTokenTypes.MOD_ASSIGN)
            sb.append("%=");
        else if(operator == JavaTokenTypes.DIV_ASSIGN)
            sb.append("/=");
        else if(operator == JavaTokenTypes.BXOR)
            sb.append("^");
        else if(operator == JavaTokenTypes.BXOR_ASSIGN)
            sb.append("^=");
        else if(operator == JavaTokenTypes.SR)
            sb.append(">>");
        else if(operator == JavaTokenTypes.SR_ASSIGN)
            sb.append(">>=");
        else if(operator == JavaTokenTypes.SL)
            sb.append("<<");
        else if(operator == JavaTokenTypes.SL_ASSIGN)
            sb.append("<<=");
        else if(operator == JavaTokenTypes.LITERAL_instanceof)
            sb.append("instanceof");

        if(operator == JavaTokenTypes.DOT)
            sb.append(rightExpression.toJAVA());
        else
            sb.append(" ").append(rightExpression.toJAVA());
        if(!(operator == JavaTokenTypes.ASSIGN || operator == JavaTokenTypes.DOT))
            sb.append(")");
        return sb.toString();
    }

    private ExpressionSymbol leftExpression;
    private ExpressionSymbol rightExpression;
    private int operator;
}
