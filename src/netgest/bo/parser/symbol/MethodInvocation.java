/*Enconding=UTF-8*/
/* Generated by Together */

package netgest.bo.parser.symbol;

import java.util.ArrayList;

public class MethodInvocation implements ExpressionSymbol {
    private ExpressionSymbol parameters;
    private ExpressionSymbol invocation;
    private String retType;
    //atributos utilizados no caso de ser um método e não um atributo do objecto
    private boolean method = false;
    private ArrayList nextM = null;

    public void MethodInvocation(){
    }

    public void setInvocation(ExpressionSymbol e){
        this.invocation = e;
    }

    public void setReturnType(String type)
    {
        this.retType = type;
    }

    public String getReturnType()
    {
        return retType;
    }

    public ExpressionSymbol getInvocation(){
        return invocation;
    }

    public void setParameters(ExpressionSymbol parameters){
        this.parameters = parameters;
    }

    public ExpressionSymbol getParameters(){
        return parameters;
    }

    public void setMethodInst(ArrayList l){
        method = true;
        nextM = l;
        
    }

    public String toJAVA(){
        StringBuffer sb = new StringBuffer();
        sb.append(invocation.toJAVA());

        sb.append("(");
        if(parameters != null)
            sb.append(parameters.toJAVA());
        sb.append(")");
        
        if(method && nextM != null)
        {
            for(int i = 0; i < nextM.size(); i++)
            {
                if(nextM.get(i) instanceof String)
                {
                    sb.append(nextM.get(i));    
                }
                else if(nextM.get(i) instanceof VarLiteral)
                {
                    sb.append(((VarLiteral)nextM.get(i)).toJAVA());
                }
                else if(nextM.get(i) instanceof ExpressionSymbol)
                {
                    sb.append("(");
                    sb.append(((ExpressionSymbol)nextM.get(i)).toJAVA());
                    sb.append(")");
                }
                else
                {
                    sb.append(nextM.get(i).toString());
                }
            }
            
        }
        
        return sb.toString();
    }
}
