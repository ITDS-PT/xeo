package netgest.bo.impl.document.print;
import oracle.soap.transport.http.OracleSOAPHTTPConnection;
import org.apache.soap.encoding.SOAPMappingRegistry;
import java.net.URL;
import org.apache.soap.rpc.Call;
import org.apache.soap.Constants;
import java.util.Vector;
import org.apache.soap.rpc.Parameter;
import org.apache.soap.rpc.Response;
import org.apache.soap.Fault;
import org.apache.soap.SOAPException;
import java.util.Properties;




























































/**
 * Generated by the Oracle JDeveloper 10g Web Services Stub/Skeleton Generator.
 * Date Created: Thu Oct 04 15:40:52 BST 2007
 * WSDL URL: http://localhost:8989/xeoRemoteConversion/GDOCXUtils?WSDL
 */

public class GDOCXUtilsStub 
{
    public GDOCXUtilsStub()
    {
        m_httpConnection = new OracleSOAPHTTPConnection();
        m_smr = new SOAPMappingRegistry();
    }

    private String _endpoint = "http://localhost:8888/xeoRemoteConversion/GDOCXUtils";

    public String getEndpoint()
    {
        return _endpoint;
    }

    public void setEndpoint(String endpoint)
    {
        _endpoint = endpoint;
    }

    private OracleSOAPHTTPConnection m_httpConnection = null;
    private SOAPMappingRegistry m_smr = null;

    public String runGDUtilsMethod(String method, String[] args, Long timeout) throws Exception
    {
        String returnVal = null;

        URL endpointURL = new URL(_endpoint);
        Call call = new Call();
        call.setSOAPTransport(m_httpConnection);
        call.setTargetObjectURI("GDOCXUtils");
        call.setMethodName("runGDUtilsMethod");
        call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);

        Vector params = new Vector();
        params.addElement(new Parameter("method", String.class, method, null));
        params.addElement(new Parameter("args", String[].class, args, null));
        params.addElement(new Parameter("timeout", Long.class, timeout, null));
        call.setParams(params);

        call.setSOAPMappingRegistry(m_smr);

        Response response = call.invoke(endpointURL, "");

        if (!response.generatedFault())
        {
            Parameter result = response.getReturnValue();
            returnVal = (String)result.getValue();
        }
        else
        {
            Fault fault = response.getFault();
            throw new SOAPException(fault.getFaultCode(), fault.getFaultString());
        }

        return returnVal;
    }

    public void KillProcess(String processName) throws Exception
    {
        URL endpointURL = new URL(_endpoint);
        Call call = new Call();
        call.setSOAPTransport(m_httpConnection);
        call.setTargetObjectURI("GDOCXUtils");
        call.setMethodName("KillProcess");
        call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);

        Vector params = new Vector();
        params.addElement(new Parameter("processName", String.class, processName, null));
        call.setParams(params);

        call.setSOAPMappingRegistry(m_smr);

        Response response = call.invoke(endpointURL, "");

        if (!response.generatedFault())
        {
            Parameter result = response.getReturnValue();
        }
        else
        {
            Fault fault = response.getFault();
            throw new SOAPException(fault.getFaultCode(), fault.getFaultString());
        }

    }

    public void closeOCX() throws Exception
    {
        URL endpointURL = new URL(_endpoint);
        Call call = new Call();
        call.setSOAPTransport(m_httpConnection);
        call.setTargetObjectURI("GDOCXUtils");
        call.setMethodName("closeOCX");
        call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);

        Vector params = new Vector();
        call.setParams(params);

        call.setSOAPMappingRegistry(m_smr);

        Response response = call.invoke(endpointURL, "");

        if (!response.generatedFault())
        {
            Parameter result = response.getReturnValue();
        }
        else
        {
            Fault fault = response.getFault();
            throw new SOAPException(fault.getFaultCode(), fault.getFaultString());
        }

    }

    public void setMaintainSession(boolean maintainSession)
    {
        m_httpConnection.setMaintainSession(maintainSession);
    }

    public boolean getMaintainSession()
    {
        return m_httpConnection.getMaintainSession();
    }

    public void setTransportProperties(Properties props)
    {
        m_httpConnection.setProperties(props);
    }

    public Properties getTransportProperties()
    {
        return m_httpConnection.getProperties();
    }
}
