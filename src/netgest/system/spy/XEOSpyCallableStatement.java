/*Enconding=UTF-8*/
package netgest.system.spy;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;

import java.sql.*;
import java.util.Calendar;

public class XEOSpyCallableStatement extends XEOSpyPreparedStatement implements java.sql.CallableStatement {


    protected CallableStatement callStmtPassthru;
    public void addBatch() throws SQLException {
		callStmtPassthru.addBatch();
	}

	public void addBatch(String sql) throws SQLException {
		callStmtPassthru.addBatch(sql);
	}

	public void cancel() throws SQLException {
		callStmtPassthru.cancel();
	}

	public void clearBatch() throws SQLException {
		callStmtPassthru.clearBatch();
	}

	public void clearParameters() throws SQLException {
		callStmtPassthru.clearParameters();
	}

	public void clearWarnings() throws SQLException {
		callStmtPassthru.clearWarnings();
	}

	public void close() throws SQLException {
		close = true;
		callStmtPassthru.close();
	}

	public boolean execute() throws SQLException {
		return callStmtPassthru.execute();
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return callStmtPassthru.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return callStmtPassthru.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return callStmtPassthru.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		return callStmtPassthru.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		return callStmtPassthru.executeBatch();
	}

	public ResultSet executeQuery() throws SQLException {
		return callStmtPassthru.executeQuery();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return callStmtPassthru.executeQuery(sql);
	}

	public int executeUpdate() throws SQLException {
		return callStmtPassthru.executeUpdate();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return callStmtPassthru.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return callStmtPassthru.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return callStmtPassthru.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		return callStmtPassthru.executeUpdate(sql);
	}

	public Reader getCharacterStream(int parameterIndex) throws SQLException {
		return callStmtPassthru.getCharacterStream(parameterIndex);
	}

	public Reader getCharacterStream(String parameterName) throws SQLException {
		return callStmtPassthru.getCharacterStream(parameterName);
	}

	public Connection getConnection() throws SQLException {
		return callStmtPassthru.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return callStmtPassthru.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return callStmtPassthru.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return callStmtPassthru.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return callStmtPassthru.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return callStmtPassthru.getMaxRows();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return callStmtPassthru.getMetaData();
	}

	public boolean getMoreResults() throws SQLException {
		return callStmtPassthru.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return callStmtPassthru.getMoreResults(current);
	}

	public Reader getNCharacterStream(int parameterIndex) throws SQLException {
		return callStmtPassthru.getNCharacterStream(parameterIndex);
	}

	public Reader getNCharacterStream(String parameterName) throws SQLException {
		return callStmtPassthru.getNCharacterStream(parameterName);
	}

	public NClob getNClob(int parameterIndex) throws SQLException {
		return callStmtPassthru.getNClob(parameterIndex);
	}

	public NClob getNClob(String parameterName) throws SQLException {
		return callStmtPassthru.getNClob(parameterName);
	}

	public String getNString(int parameterIndex) throws SQLException {
		return callStmtPassthru.getNString(parameterIndex);
	}

	public String getNString(String parameterName) throws SQLException {
		return callStmtPassthru.getNString(parameterName);
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return callStmtPassthru.getParameterMetaData();
	}

	public int getQueryTimeout() throws SQLException {
		return callStmtPassthru.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return callStmtPassthru.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return callStmtPassthru.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return callStmtPassthru.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return callStmtPassthru.getResultSetType();
	}

	public RowId getRowId(int parameterIndex) throws SQLException {
		return callStmtPassthru.getRowId(parameterIndex);
	}

	public RowId getRowId(String parameterName) throws SQLException {
		return callStmtPassthru.getRowId(parameterName);
	}

	public SQLXML getSQLXML(int parameterIndex) throws SQLException {
		return callStmtPassthru.getSQLXML(parameterIndex);
	}

	public SQLXML getSQLXML(String parameterName) throws SQLException {
		return callStmtPassthru.getSQLXML(parameterName);
	}

	public int getUpdateCount() throws SQLException {
		return callStmtPassthru.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return callStmtPassthru.getWarnings();
	}


	public void setArray(int parameterIndex, Array x) throws SQLException {
		callStmtPassthru.setArray(parameterIndex, x);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		callStmtPassthru.setAsciiStream(parameterIndex, x, length);
	}

	public void setAsciiStream(String parameterName, InputStream x, long length)
			throws SQLException {
		callStmtPassthru.setAsciiStream(parameterName, x, length);
	}

	public void setAsciiStream(String parameterName, InputStream x)
			throws SQLException {
		callStmtPassthru.setAsciiStream(parameterName, x);
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x)
			throws SQLException {
		callStmtPassthru.setBigDecimal(parameterIndex, x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		callStmtPassthru.setBinaryStream(parameterIndex, x, length);
	}

	public void setBinaryStream(int parameterIndex, InputStream x)
			throws SQLException {
		callStmtPassthru.setBinaryStream(parameterIndex, x);
	}

	public void setBinaryStream(String parameterName, InputStream x, long length)
			throws SQLException {
		callStmtPassthru.setBinaryStream(parameterName, x, length);
	}

	public void setBinaryStream(String parameterName, InputStream x)
			throws SQLException {
		callStmtPassthru.setBinaryStream(parameterName, x);
	}

	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		callStmtPassthru.setBlob(parameterIndex, x);
	}

	public void setBlob(String parameterName, Blob x) throws SQLException {
		callStmtPassthru.setBlob(parameterName, x);
	}

	public void setBlob(String parameterName, InputStream inputStream,
			long length) throws SQLException {
		callStmtPassthru.setBlob(parameterName, inputStream, length);
	}

	public void setBlob(String parameterName, InputStream inputStream)
			throws SQLException {
		callStmtPassthru.setBlob(parameterName, inputStream);
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		callStmtPassthru.setBoolean(parameterIndex, x);
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		callStmtPassthru.setByte(parameterIndex, x);
	}

	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		callStmtPassthru.setBytes(parameterIndex, x);
	}

	public void setCharacterStream(int parameterIndex, Reader reader, int length)
			throws SQLException {
		callStmtPassthru.setCharacterStream(parameterIndex, reader, length);
	}

	public void setCharacterStream(String parameterName, Reader reader,
			long length) throws SQLException {
		callStmtPassthru.setCharacterStream(parameterName, reader, length);
	}

	public void setCharacterStream(String parameterName, Reader reader)
			throws SQLException {
		callStmtPassthru.setCharacterStream(parameterName, reader);
	}

	public void setClob(int parameterIndex, Clob x) throws SQLException {
		callStmtPassthru.setClob(parameterIndex, x);
	}

	public void setClob(String parameterName, Clob x) throws SQLException {
		callStmtPassthru.setClob(parameterName, x);
	}

	public void setClob(String parameterName, Reader reader, long length)
			throws SQLException {
		callStmtPassthru.setClob(parameterName, reader, length);
	}

	public void setClob(String parameterName, Reader reader)
			throws SQLException {
		callStmtPassthru.setClob(parameterName, reader);
	}

	public void setCursorName(String name) throws SQLException {
		callStmtPassthru.setCursorName(name);
	}

	public void setDate(int parameterIndex, Date x, Calendar cal)
			throws SQLException {
		callStmtPassthru.setDate(parameterIndex, x, cal);
	}

	public void setDate(int parameterIndex, Date x) throws SQLException {
		callStmtPassthru.setDate(parameterIndex, x);
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		callStmtPassthru.setDouble(parameterIndex, x);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		callStmtPassthru.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		callStmtPassthru.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		callStmtPassthru.setFetchSize(rows);
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		callStmtPassthru.setFloat(parameterIndex, x);
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		callStmtPassthru.setInt(parameterIndex, x);
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		callStmtPassthru.setLong(parameterIndex, x);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		callStmtPassthru.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		callStmtPassthru.setMaxRows(max);
	}

	public void setNCharacterStream(String parameterName, Reader value,
			long length) throws SQLException {
		callStmtPassthru.setNCharacterStream(parameterName, value, length);
	}

	public void setNCharacterStream(String parameterName, Reader value)
			throws SQLException {
		callStmtPassthru.setNCharacterStream(parameterName, value);
	}

	public void setNClob(String parameterName, NClob value) throws SQLException {
		callStmtPassthru.setNClob(parameterName, value);
	}

	public void setNClob(String parameterName, Reader reader, long length)
			throws SQLException {
		callStmtPassthru.setNClob(parameterName, reader, length);
	}

	public void setNClob(String parameterName, Reader reader)
			throws SQLException {
		callStmtPassthru.setNClob(parameterName, reader);
	}

	public void setNString(String parameterName, String value)
			throws SQLException {
		callStmtPassthru.setNString(parameterName, value);
	}

	public void setNull(int parameterIndex, int sqlType, String typeName)
			throws SQLException {
		callStmtPassthru.setNull(parameterIndex, sqlType, typeName);
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		callStmtPassthru.setNull(parameterIndex, sqlType);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType,
			int scaleOrLength) throws SQLException {
		callStmtPassthru.setObject(parameterIndex, x, targetSqlType,
				scaleOrLength);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType)
			throws SQLException {
		callStmtPassthru.setObject(parameterIndex, x, targetSqlType);
	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		callStmtPassthru.setObject(parameterIndex, x);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		callStmtPassthru.setQueryTimeout(seconds);
	}

	public void setRef(int parameterIndex, Ref x) throws SQLException {
		callStmtPassthru.setRef(parameterIndex, x);
	}

	public void setRowId(String parameterName, RowId x) throws SQLException {
		callStmtPassthru.setRowId(parameterName, x);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		callStmtPassthru.setShort(parameterIndex, x);
	}

	public void setSQLXML(String parameterName, SQLXML xmlObject)
			throws SQLException {
		callStmtPassthru.setSQLXML(parameterName, xmlObject);
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		callStmtPassthru.setString(parameterIndex, x);
	}

	public void setTime(int parameterIndex, Time x, Calendar cal)
			throws SQLException {
		callStmtPassthru.setTime(parameterIndex, x, cal);
	}

	public void setTime(int parameterIndex, Time x) throws SQLException {
		callStmtPassthru.setTime(parameterIndex, x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
			throws SQLException {
		callStmtPassthru.setTimestamp(parameterIndex, x, cal);
	}

	public void setTimestamp(int parameterIndex, Timestamp x)
			throws SQLException {
		callStmtPassthru.setTimestamp(parameterIndex, x);
	}

	public void setUnicodeStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		callStmtPassthru.setUnicodeStream(parameterIndex, x, length);
	}

	public void setURL(int parameterIndex, URL x) throws SQLException {
		callStmtPassthru.setURL(parameterIndex, x);
	}

	protected String callableQuery;
    private boolean closed = false;
    private Throwable t = new Throwable();
    
    public XEOSpyCallableStatement(CallableStatement statement, Connection conn, String query) {
        super(statement, conn, query);
        this.callableQuery = query;
        this.callStmtPassthru = statement;
    }

    public String getString(int p0) throws SQLException {
        return callStmtPassthru.getString(p0);
    }

    public void registerOutParameter(int p0, int p1) throws SQLException {
        callStmtPassthru.registerOutParameter(p0, p1);
    }

    public void registerOutParameter(int p0, int p1, int p2) throws SQLException {
        callStmtPassthru.registerOutParameter(p0, p1, p2);
    }

    public void registerOutParameter(int p0, int p1, String p2) throws SQLException {
        callStmtPassthru.registerOutParameter(p0, p1, p2);
    }

    public boolean wasNull() throws SQLException {
        return callStmtPassthru.wasNull();
    }

    public java.sql.Array getArray(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getArray(p0);
    }

    public java.math.BigDecimal getBigDecimal(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getBigDecimal(p0);
    }

    public java.math.BigDecimal getBigDecimal(int p0, int p1) throws java.sql.SQLException {
        return callStmtPassthru.getBigDecimal(p0,p1);
    }

    public java.sql.Blob getBlob(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getBlob(p0);
    }

    public boolean getBoolean(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getBoolean(p0);
    }

    public byte getByte(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getByte(p0);
    }

    public byte[] getBytes(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getBytes(p0);
    }

    public java.sql.Clob getClob(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getClob(p0);
    }

    public java.sql.Date getDate(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getDate(p0);
    }

    public java.sql.Date getDate(int p0, java.util.Calendar calendar) throws java.sql.SQLException {
        return callStmtPassthru.getDate(p0,calendar);
    }

    public double getDouble(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getDouble(p0);
    }

    public float getFloat(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getFloat(p0);
    }

    public int getInt(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getInt(p0);
    }

    public long getLong(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getLong(p0);
    }

    public Object getObject(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getObject(p0);
    }

    public Object getObject(int p0, java.util.Map p1) throws java.sql.SQLException {
        return callStmtPassthru.getObject(p0, p1);
    }

    public java.sql.Ref getRef(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getRef(p0);
    }

    public short getShort(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getShort(p0);
    }

    public java.sql.Time getTime(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getTime(p0);
    }

    public java.sql.Time getTime(int p0, java.util.Calendar p1) throws java.sql.SQLException {
        return callStmtPassthru.getTime(p0,p1);
    }

    public java.sql.Timestamp getTimestamp(int p0) throws java.sql.SQLException {
        return callStmtPassthru.getTimestamp(p0);
    }

    public java.sql.Timestamp getTimestamp(int p0, java.util.Calendar p1) throws java.sql.SQLException {
        return callStmtPassthru.getTimestamp(p0,p1);
    }

    // Since JDK 1.4
    public void registerOutParameter(String p0, int p1) throws java.sql.SQLException {
        callStmtPassthru.registerOutParameter(p0, p1);
    }

    // Since JDK 1.4
    public void registerOutParameter(String p0, int p1, int p2) throws java.sql.SQLException {
        callStmtPassthru.registerOutParameter(p0, p1, p2);
    }

    // Since JDK 1.4
    public void registerOutParameter(String p0, int p1, String p2) throws java.sql.SQLException {
        callStmtPassthru.registerOutParameter(p0, p1, p2);
    }

    // Since JDK 1.4
    public java.net.URL getURL(int p0) throws java.sql.SQLException {
        return(callStmtPassthru.getURL(p0));
    }

    // Since JDK 1.4
    public void setURL(String p0, java.net.URL p1) throws java.sql.SQLException {
        callStmtPassthru.setURL(p0, p1);
    }

    // Since JDK 1.4
    public void setNull(String p0, int p1) throws java.sql.SQLException {
        callStmtPassthru.setNull(p0, p1);
    }

    // Since JDK 1.4
    public void setBoolean(String p0, boolean p1) throws java.sql.SQLException {
        callStmtPassthru.setBoolean(p0, p1);
    }

    // Since JDK 1.4
    public void setByte(String p0, byte p1) throws java.sql.SQLException {
        callStmtPassthru.setByte(p0, p1);
    }

    // Since JDK 1.4
    public void setShort(String p0, short p1) throws java.sql.SQLException {
        callStmtPassthru.setShort(p0, p1);
    }

    // Since JDK 1.4
    public void setInt(String p0, int p1) throws java.sql.SQLException {
        callStmtPassthru.setInt(p0, p1);
    }

    // Since JDK 1.4
    public void setLong(String p0, long p1) throws java.sql.SQLException {
        callStmtPassthru.setLong(p0, p1);
    }

    // Since JDK 1.4
    public void setFloat(String p0, float p1) throws java.sql.SQLException {
        callStmtPassthru.setFloat(p0, p1);
    }

    // Since JDK 1.4
    public void setDouble(String p0, double p1) throws java.sql.SQLException {
        callStmtPassthru.setDouble(p0, p1);
    }

    // Since JDK 1.4
    public void setBigDecimal(String p0, java.math.BigDecimal p1) throws java.sql.SQLException {
        callStmtPassthru.setBigDecimal(p0, p1);
    }

    // Since JDK 1.4
    public void setString(String p0, String p1) throws java.sql.SQLException {
        callStmtPassthru.setString(p0, p1);
    }

    // Since JDK 1.4
    public void setBytes(String p0, byte p1[]) throws java.sql.SQLException {
        callStmtPassthru.setBytes(p0, p1);
    }

    // Since JDK 1.4
    public void setDate(String p0, java.sql.Date p1) throws java.sql.SQLException {
        callStmtPassthru.setDate(p0, p1);
    }

    // Since JDK 1.4
    public void setTime(String p0, java.sql.Time p1) throws java.sql.SQLException {
        callStmtPassthru.setTime(p0, p1);
    }

    // Since JDK 1.4
    public void setTimestamp(String p0, java.sql.Timestamp p1) throws java.sql.SQLException {
        callStmtPassthru.setTimestamp(p0, p1);
    }

    // Since JDK 1.4
    public void setAsciiStream(String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
        callStmtPassthru.setAsciiStream(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setBinaryStream(String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
        callStmtPassthru.setBinaryStream(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setObject(String p0, Object p1, int p2, int p3) throws java.sql.SQLException {
        callStmtPassthru.setObject(p0, p1, p2, p3);
    }

    // Since JDK 1.4
    public void setObject(String p0, Object p1, int p2) throws java.sql.SQLException {
        callStmtPassthru.setObject(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setObject(String p0, Object p1) throws java.sql.SQLException {
        callStmtPassthru.setObject(p0, p1);
    }

    // Since JDK 1.4
    public void setCharacterStream(String p0, java.io.Reader p1, int p2) throws java.sql.SQLException {
        callStmtPassthru.setCharacterStream(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setDate(String p0, java.sql.Date p1, java.util.Calendar p2) throws java.sql.SQLException {
        callStmtPassthru.setDate(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setTime(String p0, java.sql.Time p1, java.util.Calendar p2) throws java.sql.SQLException {
        callStmtPassthru.setTime(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setTimestamp(String p0, java.sql.Timestamp p1, java.util.Calendar p2) throws java.sql.SQLException {
        callStmtPassthru.setTimestamp(p0, p1, p2);
    }

    // Since JDK 1.4
    public void setNull(String p0, int p1, String p2) throws java.sql.SQLException {
        callStmtPassthru.setNull(p0, p1, p2);
    }

    // Since JDK 1.4
    public String getString(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getString(p0));
    }

    // Since JDK 1.4
    public boolean getBoolean(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getBoolean(p0));
    }

    // Since JDK 1.4
    public byte getByte(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getByte(p0));
    }

    // Since JDK 1.4
    public short getShort(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getShort(p0));
    }

    // Since JDK 1.4
    public int getInt(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getInt(p0));
    }

    // Since JDK 1.4
    public long getLong(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getLong(p0));
    }

    // Since JDK 1.4
    public float getFloat(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getFloat(p0));
    }

    // Since JDK 1.4
    public double getDouble(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getDouble(p0));
    }

    // Since JDK 1.4
    public byte[] getBytes(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getBytes(p0));
    }

    // Since JDK 1.4
    public java.sql.Date getDate(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getDate(p0));
    }

    // Since JDK 1.4
    public java.sql.Time getTime(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getTime(p0));
    }

    // Since JDK 1.4
    public java.sql.Timestamp getTimestamp(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getTimestamp(p0));
    }

    // Since JDK 1.4
    public Object getObject(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getObject(p0));
    }

    // Since JDK 1.4
    public java.math.BigDecimal getBigDecimal(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getBigDecimal(p0));
    }

    // Since JDK 1.4
    public Object getObject(String p0, java.util.Map p1) throws java.sql.SQLException {
        return(callStmtPassthru.getObject(p0, p1));
    }

    // Since JDK 1.4
    public java.sql.Ref getRef(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getRef(p0));
    }

    // Since JDK 1.4
    public java.sql.Blob getBlob(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getBlob(p0));
    }

    // Since JDK 1.4
    public java.sql.Clob getClob(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getClob(p0));
    }

    // Since JDK 1.4
    public java.sql.Array getArray(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getArray(p0));
    }

    // Since JDK 1.4
    public java.sql.Date getDate(String p0, java.util.Calendar p1) throws java.sql.SQLException {
        return(callStmtPassthru.getDate(p0, p1));
    }

    // Since JDK 1.4
    public java.sql.Time getTime(String p0, java.util.Calendar p1) throws java.sql.SQLException {
        return(callStmtPassthru.getTime(p0, p1));
    }

    // Since JDK 1.4
    public java.sql.Timestamp getTimestamp(String p0, java.util.Calendar p1) throws java.sql.SQLException {
        return(callStmtPassthru.getTimestamp(p0, p1));
    }

    // Since JDK 1.4
    public java.net.URL getURL(String p0) throws java.sql.SQLException {
        return(callStmtPassthru.getURL(p0));
    }

    /**
     * Returns the underlying JDBC object (in this case, a
     * java.sql.CallableStatement).
     * <p>
     * The returned object is a java.sql.Statement due
     * to inheritance reasons, so you'll need to cast
     * appropriately.
     *
     * @return the wrapped JDBC object
     */
    public Statement getJDBC() {
	Statement wrapped = (callStmtPassthru instanceof XEOSpyCallableStatement) ?
	    ((XEOSpyCallableStatement) callStmtPassthru).getJDBC() :
	    callStmtPassthru;

	return wrapped;
    }

    public void printStackTrace()
    {
        t.printStackTrace();        
    }

}
